version: '3.8'

# Production deployment with Traefik to avoid port conflicts
# Following Directive 4: Security & System Resilience

services:
  # Traefik Reverse Proxy - Single entry point
  traefik:
    image: traefik:v3.0
    container_name: vi_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@vibecoder.local"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"      # Only expose standard ports
      - "443:443"    # SSL port
      - "8080:8080"  # Traefik dashboard (secure in production)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - vi_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vi_postgres_prod
    environment:
      POSTGRES_DB: vi_db
      POSTGRES_USER: vi_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vi_secure_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - vi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vi_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vi_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-vi_redis_secure}
    volumes:
      - redis_data_prod:/data
    networks:
      - vi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vi_backend_prod
    environment:
      - DATABASE_URL=postgresql://vi_user:${DB_PASSWORD:-vi_secure_password}@postgres:5432/vi_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-vi_redis_secure}@redis:6379
      - SECRET_KEY=${SECRET_KEY:-change-this-in-production}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vi_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # API routing for subdomain
      - "traefik.http.routers.backend-subdomain.rule=Host(`vi.borg.tools`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-subdomain.entrypoints=websecure"
      - "traefik.http.routers.backend-subdomain.tls=true"
      - "traefik.http.routers.backend-subdomain.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-subdomain.middlewares=backend-stripprefix"
      # API routing for path
      - "traefik.http.routers.backend-path.rule=Host(`borg.tools`) && PathPrefix(`/vi/api`)"
      - "traefik.http.routers.backend-path.entrypoints=websecure"
      - "traefik.http.routers.backend-path.tls=true"
      - "traefik.http.routers.backend-path.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-path.middlewares=vi-stripprefix,backend-stripprefix"
      # Middlewares
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.vi-stripprefix.stripprefix.prefixes=/vi"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vi_frontend_prod
    environment:
      - VITE_API_URL=/api
    networks:
      - vi_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Frontend routing for subdomain (vi.borg.tools)
      - "traefik.http.routers.vifrontend-subdomain.rule=Host(`vi.borg.tools`)"
      - "traefik.http.routers.vifrontend-subdomain.entrypoints=websecure"
      - "traefik.http.routers.vifrontend-subdomain.tls=true"
      - "traefik.http.routers.vifrontend-subdomain.tls.certresolver=myresolver"
      - "traefik.http.routers.vifrontend-subdomain.priority=10"
      # Frontend routing for path (borg.tools/vi)
      - "traefik.http.routers.vifrontend-path.rule=Host(`borg.tools`) && PathPrefix(`/vi`)"
      - "traefik.http.routers.vifrontend-path.entrypoints=websecure"
      - "traefik.http.routers.vifrontend-path.tls=true"
      - "traefik.http.routers.vifrontend-path.tls.certresolver=myresolver"
      - "traefik.http.routers.vifrontend-path.middlewares=vi-path-stripprefix"
      - "traefik.http.routers.vifrontend-path.priority=20"
      # Middlewares
      - "traefik.http.middlewares.vi-path-stripprefix.stripprefix.prefixes=/vi"
      - "traefik.http.services.vifrontend.loadbalancer.server.port=80"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.vifrontend-http.rule=Host(`vi.borg.tools`) || (Host(`borg.tools`) && PathPrefix(`/vi`))"
      - "traefik.http.routers.vifrontend-http.entrypoints=web"
      - "traefik.http.routers.vifrontend-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # Optional: ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: vi_chromadb_prod
    volumes:
      - chromadb_data_prod:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - vi_network
    restart: unless-stopped
    labels:
      - "traefik.enable=false"  # Internal service only

networks:
  vi_network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  chromadb_data_prod:
