version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: zenith_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - zenith_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zenith_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zenith_coder}
      POSTGRES_USER: ${POSTGRES_USER:-zenith_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-zenith_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - zenith_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zenith_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zenith_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - zenith_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zenith_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-zenith_user}:${POSTGRES_PASSWORD:-zenith_password}@postgres:5432/${POSTGRES_DB:-zenith_coder}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker management
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zenith_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: zenith_frontend
    environment:
      - VITE_API_URL=http://api.localhost
      - VITE_WS_URL=ws://api.localhost/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - zenith_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # Vector Database (ChromaDB)
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: zenith_chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - zenith_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chromadb.rule=Host(`vector.localhost`)"
      - "traefik.http.routers.chromadb.entrypoints=web"
      - "traefik.http.services.chromadb.loadbalancer.server.port=8000"

  # DuckDNS Updater (optional)
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: zenith_duckdns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Warsaw
      - SUBDOMAINS=${DUCKDNS_DOMAIN}
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=false
    volumes:
      - ./config/duckdns:/config
    restart: unless-stopped
    networks:
      - zenith_network
    profiles:
      - duckdns  # Only start if explicitly requested

volumes:
  postgres_data:
  redis_data:
  chromadb_data:

networks:
  zenith_network:
    driver: bridge

